contract StherFix =
  record appointment =
    { id        : string,
      date      : string,
      services  : string }
    
  record user =
    { name        : string,
      mobile      : string,
      email       : string,
      userAddress : address }
      
  record state =
    { users             : map(address, user),
      appointments      : map(string, appointment),
      userappointments  : map(address, list(appointment)),
      admin : address }
      
  entrypoint init() =  
    { users = {},
      appointments = {},
      userappointments = {},
      admin = ak_ceUHAAtWZx8eZEVSXXPJTCsrv2BUwnDQi4ufyDKGBmgxkDcbR }

  entrypoint onlyAdmin() : bool =
    require(state.admin ==Call.caller, "You are not admin to access this page")
    true 

  stateful entrypoint makeProfile(name' : string, email' : string, mobile' : string) =
    let newUser = {name = name', email = email', mobile = mobile', userAddress = Call.caller}

    put(state{users[Call.caller] = newUser})
      
  stateful entrypoint bookAppointment(id' : string, date' : string, services': string)=
    require(state.users[Call.caller].userAddress == Call.caller, "Create a Profile first")
    let newAppointment = {id = id', date = date', services = services'}

    let userAppointmentList=Map.lookup_default(Call.caller,state.userappointments,[])
    let newUserAppointmentList=newAppointment::userAppointmentList

    put(state{ appointments[id'] = newAppointment, userappointments[Call.caller] = newUserAppointmentList })

  entrypoint getUser() : user =
   switch(Map.lookup(Call.caller, state.users))
      None    => abort("User not found")
      Some(x) => x 

  entrypoint getUserAppointments()=
   Map.lookup_default(Call.caller, state.userappointments,[]) 

  entrypoint getAllAppointment()=
   onlyAdmin()
   state.appointments 